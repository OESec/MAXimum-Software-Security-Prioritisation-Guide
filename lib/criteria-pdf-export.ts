import jsPDF from "jspdf"
import type { PlatformType } from "@/lib/types"

export function exportCriteriaToPDF(platformType: PlatformType) {
  const doc = new jsPDF()
  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  const margin = 20
  let yPosition = margin

  // Helper function to check if we need a new page
  const checkPageBreak = (requiredSpace: number) => {
    if (yPosition + requiredSpace > pageHeight - margin) {
      doc.addPage()
      yPosition = margin
      return true
    }
    return false
  }

  // Helper function to add wrapped text
  const addWrappedText = (text: string, x: number, y: number, maxWidth: number, fontSize = 12) => {
    doc.setFontSize(fontSize)
    const lines = doc.splitTextToSize(text, maxWidth)
    doc.text(lines, x, y)
    return y + lines.length * fontSize * 0.4
  }

  // Header
  doc.setFontSize(20)
  doc.setFont("helvetica", "bold")
  doc.text("MAXimum Security Priority Calculator", margin, yPosition)
  yPosition += 15

  doc.setFontSize(16)
  doc.text(`${platformType.name} Security Criteria Reference`, margin, yPosition)
  yPosition += 10

  doc.setFontSize(12)
  doc.setFont("helvetica", "normal")
  yPosition = addWrappedText(platformType.description, margin, yPosition, pageWidth - 2 * margin)
  yPosition += 15

  // Summary info
  doc.setFontSize(10)
  doc.setFont("helvetica", "bold")
  doc.text(`Total Criteria: ${platformType.criteria.length}`, margin, yPosition)
  doc.text(`Total Weight: ${platformType.criteria.reduce((sum, c) => sum + c.weight, 0)}%`, margin + 80, yPosition)
  yPosition += 15

  // Line separator
  doc.line(margin, yPosition, pageWidth - margin, yPosition)
  yPosition += 10

  // Criteria details
  platformType.criteria.forEach((criterion, index) => {
    checkPageBreak(60)

    // Criterion header
    doc.setFontSize(14)
    doc.setFont("helvetica", "bold")
    doc.text(`${index + 1}. ${criterion.name}`, margin, yPosition)
    yPosition += 8

    doc.setFontSize(10)
    doc.setFont("helvetica", "normal")
    doc.text(`Weight: ${criterion.weight}%`, margin + 10, yPosition)
    yPosition += 8

    // Description
    doc.setFontSize(9)
    yPosition = addWrappedText(criterion.description, margin + 10, yPosition, pageWidth - 2 * margin - 10, 9)
    yPosition += 8

    // Options
    doc.setFontSize(10)
    doc.setFont("helvetica", "bold")
    doc.text("Available Options:", margin + 10, yPosition)
    yPosition += 8

    // Sort options by score (highest first)
    const sortedOptions = [...criterion.options].sort((a, b) => b.value - a.value)

    sortedOptions.forEach((option) => {
      checkPageBreak(15)

      doc.setFont("helvetica", "normal")
      doc.text(`• ${option.label}`, margin + 20, yPosition)

      // Score with color coding
      const scoreColor =
        option.value >= 80
          ? [0, 128, 0]
          : option.value >= 60
            ? [255, 140, 0]
            : option.value >= 40
              ? [255, 100, 0]
              : [220, 20, 60]
      doc.setTextColor(...scoreColor)
      doc.text(`(Score: ${option.value})`, margin + 120, yPosition)
      doc.setTextColor(0, 0, 0) // Reset color

      yPosition += 6

      if (option.description) {
        doc.setFontSize(8)
        doc.setTextColor(100, 100, 100)
        yPosition = addWrappedText(`${option.description}`, margin + 25, yPosition, pageWidth - 2 * margin - 25, 8)
        doc.setTextColor(0, 0, 0)
        yPosition += 3
      }

      doc.setFontSize(10)
    })

    yPosition += 10
  })

  // Footer
  const footerY = pageHeight - 15
  doc.setFontSize(8)
  doc.setFont("helvetica", "normal")
  doc.setTextColor(128, 128, 128)
  doc.text("Generated by MAXimum Security Priority Calculator | Creation of Edewede O.", margin, footerY)
  doc.text(`Generated on: ${new Date().toLocaleString()}`, pageWidth - margin - 60, footerY)

  // Save the PDF
  const fileName = `${platformType.name}_Security_Criteria_${new Date().toISOString().split("T")[0]}.pdf`
  doc.save(fileName)
}

export function exportAllCriteriaToPDF(platformTypes: PlatformType[]) {
  const doc = new jsPDF()
  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  const margin = 20
  let yPosition = margin

  // Helper function to check if we need a new page
  const checkPageBreak = (requiredSpace: number) => {
    if (yPosition + requiredSpace > pageHeight - margin) {
      doc.addPage()
      yPosition = margin
      return true
    }
    return false
  }

  // Helper function to add wrapped text
  const addWrappedText = (text: string, x: number, y: number, maxWidth: number, fontSize = 12) => {
    doc.setFontSize(fontSize)
    const lines = doc.splitTextToSize(text, maxWidth)
    doc.text(lines, x, y)
    return y + lines.length * fontSize * 0.4
  }

  // Header
  doc.setFontSize(20)
  doc.setFont("helvetica", "bold")
  doc.text("MAXimum Security Priority Calculator", margin, yPosition)
  yPosition += 15

  doc.setFontSize(16)
  doc.text("Complete Security Criteria Reference", margin, yPosition)
  yPosition += 10

  doc.setFontSize(12)
  doc.setFont("helvetica", "normal")
  doc.text("All platform types and their security evaluation criteria", margin, yPosition)
  yPosition += 20

  // Platform summary
  doc.setFontSize(12)
  doc.setFont("helvetica", "bold")
  doc.text("Platform Types Overview:", margin, yPosition)
  yPosition += 10

  doc.setFont("helvetica", "normal")
  doc.setFontSize(10)
  platformTypes.forEach((platform) => {
    doc.text(`• ${platform.name}: ${platform.criteria.length} criteria`, margin + 10, yPosition)
    yPosition += 6
  })
  yPosition += 15

  // Line separator
  doc.line(margin, yPosition, pageWidth - margin, yPosition)
  yPosition += 15

  // Each platform type
  platformTypes.forEach((platformType, platformIndex) => {
    if (platformIndex > 0) {
      doc.addPage()
      yPosition = margin
    }

    // Platform header
    doc.setFontSize(18)
    doc.setFont("helvetica", "bold")
    doc.text(`${platformType.name}`, margin, yPosition)
    yPosition += 12

    doc.setFontSize(12)
    doc.setFont("helvetica", "normal")
    yPosition = addWrappedText(platformType.description, margin, yPosition, pageWidth - 2 * margin)
    yPosition += 15

    // Platform summary
    doc.setFontSize(10)
    doc.setFont("helvetica", "bold")
    doc.text(`Criteria Count: ${platformType.criteria.length}`, margin, yPosition)
    doc.text(`Total Weight: ${platformType.criteria.reduce((sum, c) => sum + c.weight, 0)}%`, margin + 80, yPosition)
    yPosition += 15

    // Criteria for this platform
    platformType.criteria.forEach((criterion, index) => {
      checkPageBreak(50)

      // Criterion header
      doc.setFontSize(12)
      doc.setFont("helvetica", "bold")
      doc.text(`${index + 1}. ${criterion.name} (${criterion.weight}%)`, margin + 10, yPosition)
      yPosition += 8

      // Description
      doc.setFontSize(9)
      doc.setFont("helvetica", "normal")
      yPosition = addWrappedText(criterion.description, margin + 15, yPosition, pageWidth - 2 * margin - 15, 9)
      yPosition += 6

      // Options (condensed format for all platforms view)
      doc.setFontSize(8)
      doc.setFont("helvetica", "bold")
      doc.text("Options:", margin + 15, yPosition)
      yPosition += 5

      const sortedOptions = [...criterion.options].sort((a, b) => b.value - a.value)
      sortedOptions.forEach((option) => {
        checkPageBreak(8)
        doc.setFont("helvetica", "normal")
        const scoreColor =
          option.value >= 80
            ? [0, 128, 0]
            : option.value >= 60
              ? [255, 140, 0]
              : option.value >= 40
                ? [255, 100, 0]
                : [220, 20, 60]
        doc.setTextColor(...scoreColor)
        doc.text(`• ${option.label} (${option.value})`, margin + 20, yPosition)
        doc.setTextColor(0, 0, 0)
        yPosition += 5
      })

      yPosition += 8
    })

    yPosition += 10
  })

  // Footer on last page
  const footerY = pageHeight - 15
  doc.setFontSize(8)
  doc.setFont("helvetica", "normal")
  doc.setTextColor(128, 128, 128)
  doc.text("Generated by MAXimum Security Priority Calculator | Creation of Edewede O.", margin, footerY)
  doc.text(`Generated on: ${new Date().toLocaleString()}`, pageWidth - margin - 60, footerY)

  // Save the PDF
  const fileName = `All_Security_Criteria_${new Date().toISOString().split("T")[0]}.pdf`
  doc.save(fileName)
}
